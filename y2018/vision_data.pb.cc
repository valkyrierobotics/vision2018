// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_data.proto

#include "vision_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace y2018 {
namespace vision {
class VisionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisionData>
      _instance;
} _VisionData_default_instance_;
}  // namespace vision
}  // namespace y2018
namespace protobuf_vision_5fdata_2eproto {
void InitDefaultsVisionDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::y2018::vision::_VisionData_default_instance_;
    new (ptr) ::y2018::vision::VisionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::y2018::vision::VisionData::InitAsDefaultInstance();
}

void InitDefaultsVisionData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVisionDataImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::y2018::vision::VisionData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::y2018::vision::VisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::y2018::vision::VisionData, image_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::y2018::vision::VisionData, send_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::y2018::vision::VisionData, yaw_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::y2018::vision::VisionData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::y2018::vision::_VisionData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vision_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021vision_data.proto\022\014y2018.vision\"J\n\nVis"
      "ionData\022\027\n\017image_timestamp\030\001 \001(\003\022\026\n\016send"
      "_timestamp\030\002 \001(\003\022\013\n\003yaw\030\003 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vision_5fdata_2eproto
namespace y2018 {
namespace vision {

// ===================================================================

void VisionData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionData::kImageTimestampFieldNumber;
const int VisionData::kSendTimestampFieldNumber;
const int VisionData::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionData::VisionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vision_5fdata_2eproto::InitDefaultsVisionData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y2018.vision.VisionData)
}
VisionData::VisionData(const VisionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&image_timestamp_, &from.image_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&image_timestamp_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:y2018.vision.VisionData)
}

void VisionData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&image_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&image_timestamp_)) + sizeof(yaw_));
}

VisionData::~VisionData() {
  // @@protoc_insertion_point(destructor:y2018.vision.VisionData)
  SharedDtor();
}

void VisionData::SharedDtor() {
}

void VisionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionData::descriptor() {
  ::protobuf_vision_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisionData& VisionData::default_instance() {
  ::protobuf_vision_5fdata_2eproto::InitDefaultsVisionData();
  return *internal_default_instance();
}

VisionData* VisionData::New(::google::protobuf::Arena* arena) const {
  VisionData* n = new VisionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:y2018.vision.VisionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&image_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&image_timestamp_)) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VisionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y2018.vision.VisionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 image_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_image_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &image_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 send_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_send_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y2018.vision.VisionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y2018.vision.VisionData)
  return false;
#undef DO_
}

void VisionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y2018.vision.VisionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 image_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->image_timestamp(), output);
  }

  // optional int64 send_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->send_timestamp(), output);
  }

  // optional double yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:y2018.vision.VisionData)
}

::google::protobuf::uint8* VisionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y2018.vision.VisionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 image_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->image_timestamp(), target);
  }

  // optional int64 send_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->send_timestamp(), target);
  }

  // optional double yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:y2018.vision.VisionData)
  return target;
}

size_t VisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y2018.vision.VisionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 image_timestamp = 1;
    if (has_image_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->image_timestamp());
    }

    // optional int64 send_timestamp = 2;
    if (has_send_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->send_timestamp());
    }

    // optional double yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y2018.vision.VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y2018.vision.VisionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y2018.vision.VisionData)
    MergeFrom(*source);
  }
}

void VisionData::MergeFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y2018.vision.VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      image_timestamp_ = from.image_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_timestamp_ = from.send_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y2018.vision.VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionData::CopyFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y2018.vision.VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionData::IsInitialized() const {
  return true;
}

void VisionData::Swap(VisionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionData::InternalSwap(VisionData* other) {
  using std::swap;
  swap(image_timestamp_, other->image_timestamp_);
  swap(send_timestamp_, other->send_timestamp_);
  swap(yaw_, other->yaw_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionData::GetMetadata() const {
  protobuf_vision_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace y2018

// @@protoc_insertion_point(global_scope)
